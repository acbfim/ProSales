// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProSales.Repository.Contexts;

#nullable disable

namespace ProSales.Repository.Migrations
{
    [DbContext(typeof(ProSalesContext))]
    [Migration("20221122060656_NewFields")]
    partial class NewFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProSales.Domain.Global.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ReferencePoint")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("Brand");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(730),
                            ExternalId = new Guid("73deb6ca-664a-4efc-8dd3-338059df8ba7"),
                            IsActive = true,
                            Name = "Generic"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TypeId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ContactType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("InternalProperty")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("ContactType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(300),
                            ExternalId = new Guid("20dba4ac-ff83-46a0-9462-e4ef14ea9047"),
                            InternalProperty = false,
                            TypeName = "Email Pessoal"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(370),
                            ExternalId = new Guid("87872a2a-12c4-4e85-83bb-6fb15ab3970f"),
                            InternalProperty = false,
                            TypeName = "Email Comercial"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(380),
                            ExternalId = new Guid("2306d6cc-7772-4b64-bbca-75d1d332b828"),
                            InternalProperty = false,
                            TypeName = "Celular Pessoal"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(390),
                            ExternalId = new Guid("2970154d-61d4-419b-80fe-1a825042bba1"),
                            InternalProperty = false,
                            TypeName = "Celular Comercial"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(400),
                            ExternalId = new Guid("c82ad557-2e42-4e03-81e3-7f95e5146fec"),
                            InternalProperty = false,
                            TypeName = "Telefone Comercial"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(420),
                            ExternalId = new Guid("dc736d73-5e48-4350-a245-1aeb2b8123ed"),
                            InternalProperty = false,
                            TypeName = "Telefone Residencial"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(430),
                            ExternalId = new Guid("f59715df-830c-4f97-ba9d-dc3cf8a7081c"),
                            InternalProperty = false,
                            TypeName = "WhatsApp Comercial"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(490),
                            ExternalId = new Guid("56b88e83-290a-4c84-8116-17736760b5e9"),
                            InternalProperty = false,
                            TypeName = "WhatsApp Pessoal"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.DiscountType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<long?>("TypeCalculatioId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TypeCalculationId")
                        .HasColumnType("bigint");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("TypeCalculationId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("DiscountType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(760),
                            ExternalId = new Guid("6825c7b4-7417-4aab-adb4-c23fc005f3ed"),
                            TypeCalculatioId = 3L,
                            TypeName = "Gerente",
                            Value = 0.0
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(770),
                            ExternalId = new Guid("460276af-07b1-4d15-a272-b067adac9de1"),
                            TypeCalculatioId = 3L,
                            TypeName = "Cupom",
                            Value = 0.0
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(790),
                            ExternalId = new Guid("f7af3e87-c725-40b6-9944-cebdb3381795"),
                            TypeCalculatioId = 2L,
                            TypeName = "Pgamento a vista",
                            Value = 0.14999999999999999
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FileName")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(130)");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("UrlLocation")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TypeId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("ProSales.Domain.Global.DocumentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("DocumentType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(580),
                            ExternalId = new Guid("dc17c33c-7648-4f9f-9f9a-6cb7c0a8690f"),
                            TypeName = "RG"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(590),
                            ExternalId = new Guid("57c73fe2-91aa-4d11-91b7-d745f29fda84"),
                            TypeName = "CPF"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(610),
                            ExternalId = new Guid("2db8e3e3-4bb2-490c-a826-e43b47ee6298"),
                            TypeName = "CNPJ"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(620),
                            ExternalId = new Guid("3fd965e1-34e3-481b-a47c-44eea63f64d0"),
                            TypeName = "CNH"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(630),
                            ExternalId = new Guid("ca95f230-25b2-457b-95df-0e21151d861f"),
                            TypeName = "Certidão de Nascimento"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(640),
                            ExternalId = new Guid("b844d756-6bae-477b-8fd3-bc7969c929b6"),
                            TypeName = "Certidão de Casamento"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(650),
                            ExternalId = new Guid("027fe812-a905-49a6-b7c2-5ec9ee71e6ed"),
                            TypeName = "Foto do usuário"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.HistoryProductSale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("AmountProductSale")
                        .HasColumnType("double");

                    b.Property<DateTime>("DateSale")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("HistoryProductSale");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Inventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("BarCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<long>("TypeCoinId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TypeCoinId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CartId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<double>("Discount")
                        .HasColumnType("double");

                    b.Property<long?>("DiscountTypeId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<long>("ProductTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SaleId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CartId");

                    b.HasIndex("DiscountTypeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("SaleId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ProductType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("InternalProperty")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("ProductType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(810),
                            ExternalId = new Guid("8ee9ee18-a7e6-4783-a20a-b0ad74d84a1e"),
                            InternalProperty = true,
                            TypeName = "Serviço"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(820),
                            ExternalId = new Guid("d65f5d05-ae76-45ff-a091-9fdfff278e58"),
                            InternalProperty = true,
                            TypeName = "Produto"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.Sale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<long>("TypeCoinId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SellerId");

                    b.HasIndex("TypeCoinId");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Specification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Specification");
                });

            modelBuilder.Entity("ProSales.Domain.Global.TypeCalculation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("InternalProperty")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TypeCalculation");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ExternalId = new Guid("9e52dc95-627b-4519-8e36-eeddb0858c02"),
                            InternalProperty = true,
                            TypeName = "SUM"
                        },
                        new
                        {
                            Id = 2L,
                            ExternalId = new Guid("07550aca-0ab2-4507-a8b1-d803a3bd8a6c"),
                            InternalProperty = true,
                            TypeName = "PERCENT"
                        },
                        new
                        {
                            Id = 3L,
                            ExternalId = new Guid("03dda645-1a46-4c2f-92ad-988296fadc88"),
                            InternalProperty = true,
                            TypeName = "SUBTRACTION"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.TypeCoin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("TypeCoin");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(680),
                            ExternalId = new Guid("f41e6129-dfaa-42a9-bae6-3f4b6af87526"),
                            Label = "R$",
                            Name = "Real"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(700),
                            ExternalId = new Guid("12d29c85-d00d-4388-ba52-f12147003875"),
                            Label = "US$",
                            Name = "Dólar"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2022, 11, 22, 3, 6, 56, 63, DateTimeKind.Local).AddTicks(710),
                            ExternalId = new Guid("bb1aa87a-37ca-4fe1-b84d-7cf22a0494cb"),
                            Label = "€",
                            Name = "Euro"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ProSales.Domain.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataUltimoLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Departamento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImagemUrlUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ProSales.Domain.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProSales.Domain.Global.Address", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", null)
                        .WithMany("Addresses")
                        .HasForeignKey("ClientId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Brand", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Cart", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Client", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Contact", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", null)
                        .WithMany("Contacts")
                        .HasForeignKey("ClientId");

                    b.HasOne("ProSales.Domain.Global.ContactType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ContactType", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.DiscountType", b =>
                {
                    b.HasOne("ProSales.Domain.Global.TypeCalculation", "TypeCalculation")
                        .WithMany()
                        .HasForeignKey("TypeCalculationId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("TypeCalculation");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Document", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", null)
                        .WithMany("Documents")
                        .HasForeignKey("ClientId");

                    b.HasOne("ProSales.Domain.Global.DocumentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ProSales.Domain.Global.DocumentType", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.HistoryProductSale", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Identity.User", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Inventory", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Product", "Product")
                        .WithMany("Inventory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Order", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("ProSales.Domain.Global.TypeCoin", "TypeCoin")
                        .WithMany()
                        .HasForeignKey("TypeCoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("TypeCoin");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Product", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("ProSales.Domain.Global.Cart", null)
                        .WithMany("Products")
                        .HasForeignKey("CartId");

                    b.HasOne("ProSales.Domain.Global.DiscountType", "DiscountType")
                        .WithMany()
                        .HasForeignKey("DiscountTypeId");

                    b.HasOne("ProSales.Domain.Global.Order", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderId");

                    b.HasOne("ProSales.Domain.Global.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Global.Sale", null)
                        .WithMany("Products")
                        .HasForeignKey("SaleId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.Navigation("Brand");

                    b.Navigation("DiscountType");

                    b.Navigation("ProductType");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ProductType", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Sale", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("ProSales.Domain.Identity.User", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.HasOne("ProSales.Domain.Global.TypeCoin", "TypeCoin")
                        .WithMany()
                        .HasForeignKey("TypeCoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Seller");

                    b.Navigation("TypeCoin");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Specification", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Product", null)
                        .WithMany("Specifications")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("ProSales.Domain.Global.TypeCoin", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Identity.UserRole", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Cart", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Client", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Contacts");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Product", b =>
                {
                    b.Navigation("Inventory");

                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Sale", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProSales.Domain.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ProSales.Domain.Identity.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
