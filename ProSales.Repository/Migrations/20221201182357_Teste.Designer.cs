// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProSales.Repository.Contexts;

#nullable disable

namespace ProSales.Repository.Migrations
{
    [DbContext(typeof(ProSalesContext))]
    [Migration("20221201182357_Teste")]
    partial class Teste
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProSales.Domain.FormTeste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("FormTesteId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FormTesteId");

                    b.ToTable("FormTeste");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ReferencePoint")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("InternalProperty")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("Brand");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8470),
                            ExternalId = new Guid("c2c7694f-090b-481b-8691-ea0db8c82e6e"),
                            InternalProperty = true,
                            IsActive = true,
                            Name = "Generic"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.CalculationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("InternalProperty")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CalculationType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ExternalId = new Guid("3f3ce9a7-e44b-4a15-8cce-d36e4decb28e"),
                            InternalProperty = true,
                            Name = "SUM"
                        },
                        new
                        {
                            Id = 2L,
                            ExternalId = new Guid("5bc826c6-87ae-470a-a3ce-73b7d85203d0"),
                            InternalProperty = true,
                            Name = "PERCENT"
                        },
                        new
                        {
                            Id = 3L,
                            ExternalId = new Guid("c6a167ed-1595-42c5-bb31-8aa2b7f4bd15"),
                            InternalProperty = true,
                            Name = "SUBTRACTION"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("ProSales.Domain.Global.CoinType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(300)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("InternalProperty")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("CoinType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8410),
                            ExternalId = new Guid("6822baae-4fd2-433f-913b-6871524da88f"),
                            InternalProperty = true,
                            IsActive = true,
                            Label = "R$",
                            Name = "Real"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8420),
                            ExternalId = new Guid("5adb4e25-9d1c-47ca-842e-e36f2573b086"),
                            InternalProperty = true,
                            IsActive = true,
                            Label = "US$",
                            Name = "Dólar"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8440),
                            ExternalId = new Guid("8830c4e9-e12b-4007-adba-18f1f14132bf"),
                            InternalProperty = true,
                            IsActive = true,
                            Label = "€",
                            Name = "Euro"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContactTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ContactType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("InternalProperty")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("ContactType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8040),
                            ExternalId = new Guid("8396252f-25be-4702-a4ff-4e72aeb8f98c"),
                            InternalProperty = true,
                            IsActive = true,
                            Name = "Email Pessoal"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8100),
                            ExternalId = new Guid("535bd564-cbf9-4b70-bd8d-b91d9b0e386b"),
                            InternalProperty = true,
                            IsActive = true,
                            Name = "Email Comercial"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8130),
                            ExternalId = new Guid("89441dc0-6d48-411f-97e2-e7d571219f6c"),
                            InternalProperty = true,
                            IsActive = true,
                            Name = "Celular Pessoal"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8140),
                            ExternalId = new Guid("ce72e22f-46fb-4864-948f-436af7e932e9"),
                            InternalProperty = true,
                            IsActive = true,
                            Name = "Celular Comercial"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8150),
                            ExternalId = new Guid("804502ab-e54d-4d61-967c-12b3e55455ea"),
                            InternalProperty = true,
                            IsActive = true,
                            Name = "Telefone Comercial"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8160),
                            ExternalId = new Guid("7e00e85c-1348-464d-b8a3-8c7b5ff06943"),
                            InternalProperty = true,
                            IsActive = true,
                            Name = "Telefone Residencial"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8170),
                            ExternalId = new Guid("83c01d00-f78a-491b-8b4e-bb01960e8c61"),
                            InternalProperty = true,
                            IsActive = true,
                            Name = "WhatsApp Comercial"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8190),
                            ExternalId = new Guid("03b8d549-eea0-42a7-9d98-941456b6e9b8"),
                            InternalProperty = true,
                            IsActive = true,
                            Name = "WhatsApp Pessoal"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.DiscountType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CalculationTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("InternalProperty")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CalculationTypeId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("DiscountType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CalculationTypeId = 3L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8490),
                            ExternalId = new Guid("e0f07220-1c0a-4ef5-9dfe-90a4e86e235e"),
                            InternalProperty = true,
                            IsActive = true,
                            Name = "Gerente",
                            Value = 0.0
                        },
                        new
                        {
                            Id = 2L,
                            CalculationTypeId = 3L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8510),
                            ExternalId = new Guid("2953afe9-448f-4dfa-aa86-b76ad7c5377d"),
                            InternalProperty = true,
                            IsActive = true,
                            Name = "Cupom",
                            Value = 0.0
                        },
                        new
                        {
                            Id = 3L,
                            CalculationTypeId = 2L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8520),
                            ExternalId = new Guid("cc64eb3f-f583-465a-ba16-6ad5ac60b3ad"),
                            InternalProperty = true,
                            IsActive = true,
                            Name = "Pgamento a vista",
                            Value = 0.14999999999999999
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("DocumentTypeId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FileName")
                        .HasColumnType("varchar(130)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UrlLocation")
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("ProSales.Domain.Global.DocumentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("InternalProperty")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("DocumentType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8300),
                            ExternalId = new Guid("b2076ea7-04f5-44ea-9a72-2627db14c385"),
                            InternalProperty = true,
                            IsActive = true,
                            Name = "RG"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8320),
                            ExternalId = new Guid("1db3c1f3-eae0-4145-b309-0a85700d7ef9"),
                            InternalProperty = true,
                            IsActive = true,
                            Name = "CPF"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8330),
                            ExternalId = new Guid("fe850045-64b3-4203-a0d6-ca82944c0a4c"),
                            InternalProperty = true,
                            IsActive = true,
                            Name = "CNPJ"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8340),
                            ExternalId = new Guid("6c85a238-1ac0-4d2d-98ac-96321adf9030"),
                            InternalProperty = true,
                            IsActive = true,
                            Name = "CNH"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8350),
                            ExternalId = new Guid("5abefd2b-c8db-4d52-9397-ea58fdf03077"),
                            InternalProperty = true,
                            IsActive = true,
                            Name = "Certidão de Nascimento"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8360),
                            ExternalId = new Guid("c41e2d40-574b-4622-b675-5a09aeb864b2"),
                            InternalProperty = true,
                            IsActive = true,
                            Name = "Certidão de Casamento"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8380),
                            ExternalId = new Guid("d40cfd5d-48ca-4201-8a17-fe81175551a8"),
                            InternalProperty = true,
                            IsActive = true,
                            Name = "Foto do usuário"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.HistoryProductSale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("AmountProductSale")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("HistoryProductSale");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Inventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("BarCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<long>("CoinTypeId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CoinTypeId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(300)");

                    b.Property<double>("Discount")
                        .HasColumnType("double");

                    b.Property<long>("DiscountTypeId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<long>("ProductTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("DiscountTypeId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ProductCart", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("CartId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CartId");

                    b.HasIndex("CartId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ProductCart");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ProductOrder", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ProductOrder");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ProductSale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("SaleId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ProductSale");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ProductType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("InternalProperty")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("ProductType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8550),
                            ExternalId = new Guid("28c1385a-ee2d-4be4-a304-a87c6b7b9b2b"),
                            InternalProperty = true,
                            IsActive = true,
                            Name = "Serviço"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2022, 12, 1, 15, 23, 57, 557, DateTimeKind.Local).AddTicks(8560),
                            ExternalId = new Guid("95de69a8-874b-4912-bad9-d5c024c63d75"),
                            InternalProperty = true,
                            IsActive = true,
                            Name = "Produto"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.Sale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoinTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CoinTypeId");

                    b.HasIndex("SellerId");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Specification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("Specification");
                });

            modelBuilder.Entity("ProSales.Domain.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ProSales.Domain.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataUltimoLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Departamento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImagemUrlUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ProSales.Domain.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProSales.Domain.FormTeste", b =>
                {
                    b.HasOne("ProSales.Domain.FormTeste", null)
                        .WithMany("Testes")
                        .HasForeignKey("FormTesteId");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Address", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", null)
                        .WithMany("Addresses")
                        .HasForeignKey("ClientId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Brand", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Cart", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Client", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.CoinType", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Contact", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", "Client")
                        .WithMany("Contacts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Global.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("Client");

                    b.Navigation("ContactType");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ContactType", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.DiscountType", b =>
                {
                    b.HasOne("ProSales.Domain.Global.CalculationType", "CalculationType")
                        .WithMany()
                        .HasForeignKey("CalculationTypeId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("CalculationType");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Document", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", "Client")
                        .WithMany("Documents")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Global.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("Client");

                    b.Navigation("DocumentType");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.DocumentType", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.HistoryProductSale", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Identity.User", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Inventory", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Product", "Product")
                        .WithMany("Inventory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("Product");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Order", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Global.CoinType", "CoinType")
                        .WithMany()
                        .HasForeignKey("CoinTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("CoinType");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Product", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Global.DiscountType", "DiscountType")
                        .WithMany()
                        .HasForeignKey("DiscountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Global.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("Brand");

                    b.Navigation("DiscountType");

                    b.Navigation("ProductType");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ProductCart", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Cart", "Cart")
                        .WithMany("ProductsCart")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Global.Product", "Product")
                        .WithMany("ProductsCart")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.Navigation("Cart");

                    b.Navigation("Product");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ProductOrder", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Order", "Order")
                        .WithMany("ProductsOrder")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Global.Product", "Product")
                        .WithMany("ProductsOrder")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ProductSale", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Global.Sale", "Sale")
                        .WithMany("ProductsSale")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.Navigation("Product");

                    b.Navigation("Sale");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ProductType", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Sale", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("ProSales.Domain.Global.CoinType", "CoinType")
                        .WithMany()
                        .HasForeignKey("CoinTypeId");

                    b.HasOne("ProSales.Domain.Identity.User", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.Navigation("Client");

                    b.Navigation("CoinType");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Specification", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Product", "Product")
                        .WithMany("Specifications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("Product");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Identity.UserRole", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProSales.Domain.FormTeste", b =>
                {
                    b.Navigation("Testes");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Cart", b =>
                {
                    b.Navigation("ProductsCart");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Client", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Contacts");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Order", b =>
                {
                    b.Navigation("ProductsOrder");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Product", b =>
                {
                    b.Navigation("Inventory");

                    b.Navigation("ProductsCart");

                    b.Navigation("ProductsOrder");

                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Sale", b =>
                {
                    b.Navigation("ProductsSale");
                });

            modelBuilder.Entity("ProSales.Domain.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ProSales.Domain.Identity.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
