// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProSales.Repository.Contexts;

#nullable disable

namespace ProSales.Repository.Migrations
{
    [DbContext(typeof(ProSalesContext))]
    partial class ProSalesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProSales.Domain.Global.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ReferencePoint")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("Brand");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4510),
                            ExternalId = new Guid("3a6b47ad-b2df-40bb-8005-12d4d8a798fd"),
                            Name = "Generic"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TypeId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ContactType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("InternalProperty")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("ContactType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4160),
                            ExternalId = new Guid("b29a45a8-ca7f-479c-96bf-5cb76385f92e"),
                            InternalProperty = false,
                            TypeName = "Email Pessoal"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4220),
                            ExternalId = new Guid("34ab7c4b-cbb0-4fc5-b718-e874bf7afbd8"),
                            InternalProperty = false,
                            TypeName = "Email Comercial"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4230),
                            ExternalId = new Guid("0bd20c7d-d7dd-4be1-a92a-f089b213b95d"),
                            InternalProperty = false,
                            TypeName = "Celular Pessoal"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4240),
                            ExternalId = new Guid("09fdc9eb-c7c7-41d7-9a8d-b50fb9647523"),
                            InternalProperty = false,
                            TypeName = "Celular Comercial"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4250),
                            ExternalId = new Guid("0163663b-e25e-470f-a6f1-046071e0ffdc"),
                            InternalProperty = false,
                            TypeName = "Telefone Comercial"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4260),
                            ExternalId = new Guid("9a41e77d-1165-4daa-b14b-082c4e076882"),
                            InternalProperty = false,
                            TypeName = "Telefone Residencial"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4280),
                            ExternalId = new Guid("e3f56a3a-40e1-48af-b68c-487c1d5c759b"),
                            InternalProperty = false,
                            TypeName = "WhatsApp Comercial"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4290),
                            ExternalId = new Guid("3f238a52-03a9-4f4e-8f8e-e145a1969664"),
                            InternalProperty = false,
                            TypeName = "WhatsApp Pessoal"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.DiscountType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<long?>("TypeCalculatioId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TypeCalculationId")
                        .HasColumnType("bigint");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("TypeCalculationId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("DiscountType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4540),
                            ExternalId = new Guid("aabdf7ca-2555-4fc7-87a3-ab57e3f4b4fe"),
                            TypeCalculatioId = 3L,
                            TypeName = "Gerente",
                            Value = 0.0
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4550),
                            ExternalId = new Guid("a39422df-07db-4cf8-834f-648a96681a97"),
                            TypeCalculatioId = 3L,
                            TypeName = "Cupom",
                            Value = 0.0
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4570),
                            ExternalId = new Guid("37c4468c-c8ac-4b84-bb78-76cb69bd82a9"),
                            TypeCalculatioId = 2L,
                            TypeName = "Pgamento a vista",
                            Value = 0.14999999999999999
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FileName")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(130)");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("UrlLocation")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TypeId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("ProSales.Domain.Global.DocumentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("DocumentType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4370),
                            ExternalId = new Guid("3d4ef3ef-7ca8-401b-8c69-1446628f94aa"),
                            TypeName = "RG"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4390),
                            ExternalId = new Guid("d09671be-95d7-4bca-a19f-53a5a9faf161"),
                            TypeName = "CPF"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4400),
                            ExternalId = new Guid("34280936-1d86-4c47-a09f-186933987545"),
                            TypeName = "CNPJ"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4410),
                            ExternalId = new Guid("a5abdb9a-a210-4073-a7b3-965793f7c233"),
                            TypeName = "CNH"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4420),
                            ExternalId = new Guid("e85feeaa-c8c8-4b71-b24e-374e89a8edb1"),
                            TypeName = "Certidão de Nascimento"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4430),
                            ExternalId = new Guid("6d97fbaf-1386-482a-b820-5c2c8b242df3"),
                            TypeName = "Certidão de Casamento"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4450),
                            ExternalId = new Guid("8e2cac3d-a9c1-4da3-8b4f-4b7b0ec2e55d"),
                            TypeName = "Foto do usuário"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.HistoryProductSale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("AmountProductSale")
                        .HasColumnType("double");

                    b.Property<DateTime>("DateSale")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("HistoryProductSale");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Inventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("BarCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<long>("TypeCoinId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TypeCoinId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CartId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<double>("Discount")
                        .HasColumnType("double");

                    b.Property<long?>("DiscountTypeId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<long>("ProductTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SaleId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CartId");

                    b.HasIndex("DiscountTypeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("SaleId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ProductType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("InternalProperty")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("ProductType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4590),
                            ExternalId = new Guid("d9fb9dcc-7407-407a-97e3-5f5d7de0a1cd"),
                            InternalProperty = true,
                            TypeName = "Serviço"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4600),
                            ExternalId = new Guid("370f1fa6-90d1-44cb-aefb-6f005934e8bb"),
                            InternalProperty = true,
                            TypeName = "Produto"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.Sale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<long>("TypeCoinId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SellerId");

                    b.HasIndex("TypeCoinId");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Specification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Specification");
                });

            modelBuilder.Entity("ProSales.Domain.Global.TypeCalculation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("InternalProperty")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TypeCalculation");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ExternalId = new Guid("0d540f8b-6c20-4d1b-a208-07b4db5b9112"),
                            InternalProperty = true,
                            TypeName = "SUM"
                        },
                        new
                        {
                            Id = 2L,
                            ExternalId = new Guid("7cba4bdb-7d32-4033-9aff-5a878ae77bca"),
                            InternalProperty = true,
                            TypeName = "PERCENT"
                        },
                        new
                        {
                            Id = 3L,
                            ExternalId = new Guid("2028c4ab-6a88-4f18-a0de-3469531c3fe1"),
                            InternalProperty = true,
                            TypeName = "SUBTRACTION"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.TypeCoin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("TypeCoin");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4470),
                            ExternalId = new Guid("77b8ad33-6f63-4c3c-8623-e99f60c8b43f"),
                            Label = "R$",
                            Name = "Real"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4480),
                            ExternalId = new Guid("c33ec2af-cd36-489a-98f6-31351220658e"),
                            Label = "US$",
                            Name = "Dólar"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2022, 11, 21, 13, 48, 55, 458, DateTimeKind.Local).AddTicks(4490),
                            ExternalId = new Guid("971df226-e904-4d9f-9375-c2c2ce747f60"),
                            Label = "€",
                            Name = "Euro"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ProSales.Domain.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataUltimoLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Departamento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImagemUrlUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ProSales.Domain.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProSales.Domain.Global.Address", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", null)
                        .WithMany("Addresses")
                        .HasForeignKey("ClientId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Brand", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Cart", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Client", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Contact", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", null)
                        .WithMany("Contacts")
                        .HasForeignKey("ClientId");

                    b.HasOne("ProSales.Domain.Global.ContactType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ContactType", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.DiscountType", b =>
                {
                    b.HasOne("ProSales.Domain.Global.TypeCalculation", "TypeCalculation")
                        .WithMany()
                        .HasForeignKey("TypeCalculationId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("TypeCalculation");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Document", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", null)
                        .WithMany("Documents")
                        .HasForeignKey("ClientId");

                    b.HasOne("ProSales.Domain.Global.DocumentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ProSales.Domain.Global.DocumentType", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.HistoryProductSale", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Identity.User", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Inventory", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Product", "Product")
                        .WithMany("Inventory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Order", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("ProSales.Domain.Global.TypeCoin", "TypeCoin")
                        .WithMany()
                        .HasForeignKey("TypeCoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("TypeCoin");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Product", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("ProSales.Domain.Global.Cart", null)
                        .WithMany("Products")
                        .HasForeignKey("CartId");

                    b.HasOne("ProSales.Domain.Global.DiscountType", "DiscountType")
                        .WithMany()
                        .HasForeignKey("DiscountTypeId");

                    b.HasOne("ProSales.Domain.Global.Order", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderId");

                    b.HasOne("ProSales.Domain.Global.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Global.Sale", null)
                        .WithMany("Products")
                        .HasForeignKey("SaleId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.Navigation("Brand");

                    b.Navigation("DiscountType");

                    b.Navigation("ProductType");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ProductType", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Sale", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("ProSales.Domain.Identity.User", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.HasOne("ProSales.Domain.Global.TypeCoin", "TypeCoin")
                        .WithMany()
                        .HasForeignKey("TypeCoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Seller");

                    b.Navigation("TypeCoin");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Specification", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Product", null)
                        .WithMany("Specifications")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("ProSales.Domain.Global.TypeCoin", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Identity.UserRole", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Cart", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Client", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Contacts");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Product", b =>
                {
                    b.Navigation("Inventory");

                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Sale", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProSales.Domain.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ProSales.Domain.Identity.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
