// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProSales.Repository.Contexts;

#nullable disable

namespace ProSales.Repository.Migrations
{
    [DbContext(typeof(ProSalesContext))]
    partial class ProSalesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProSales.Domain.Global.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ReferencePoint")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("Brand");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4620),
                            ExternalId = new Guid("e8ff8b84-e0a6-417f-9ec3-6fd695812bb4"),
                            IsActive = true,
                            Name = "Generic"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.CalculationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("InternalProperty")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CalculationType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ExternalId = new Guid("3bca5cda-5484-4a75-96b8-abc8a6f46ba4"),
                            InternalProperty = true,
                            Name = "SUM"
                        },
                        new
                        {
                            Id = 2L,
                            ExternalId = new Guid("f20a36d7-beee-410c-99e9-25dd02c33f1e"),
                            InternalProperty = true,
                            Name = "PERCENT"
                        },
                        new
                        {
                            Id = 3L,
                            ExternalId = new Guid("ac2c1ba4-e3f3-4b45-88f4-bb47eda5fcb1"),
                            InternalProperty = true,
                            Name = "SUBTRACTION"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TypeId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ContactType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("InternalProperty")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("ContactType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4100),
                            ExternalId = new Guid("5f50f08f-a1dc-4ffc-b042-aefa7e8ae1b2"),
                            InternalProperty = false,
                            IsActive = true,
                            Name = "Email Pessoal"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4160),
                            ExternalId = new Guid("823ad161-55dd-4e0e-8fd8-bf5d1a438cab"),
                            InternalProperty = false,
                            IsActive = true,
                            Name = "Email Comercial"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4170),
                            ExternalId = new Guid("153303ec-9b4b-4d66-b73e-44b600cedcdd"),
                            InternalProperty = false,
                            IsActive = true,
                            Name = "Celular Pessoal"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4180),
                            ExternalId = new Guid("b823159e-dd31-46d3-9a8b-f73d19750976"),
                            InternalProperty = false,
                            IsActive = true,
                            Name = "Celular Comercial"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4190),
                            ExternalId = new Guid("fc6d3304-7735-4f9f-87e9-9722fabe9eb1"),
                            InternalProperty = false,
                            IsActive = true,
                            Name = "Telefone Comercial"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4210),
                            ExternalId = new Guid("ee783db2-54ab-4eaf-9449-0e46c2c2f703"),
                            InternalProperty = false,
                            IsActive = true,
                            Name = "Telefone Residencial"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4220),
                            ExternalId = new Guid("565a12d7-73f6-420a-a840-017927a9c2a6"),
                            InternalProperty = false,
                            IsActive = true,
                            Name = "WhatsApp Comercial"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4230),
                            ExternalId = new Guid("cc9192a9-3578-469f-a801-91644d4ca00c"),
                            InternalProperty = false,
                            IsActive = true,
                            Name = "WhatsApp Pessoal"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.DiscountType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CalculationTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CalculationTypeId");

                    b.ToTable("DiscountType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CalculationTypeId = 3L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4650),
                            ExternalId = new Guid("3199ee31-a6b0-4345-9e65-e3ee89c8f774"),
                            IsActive = true,
                            Name = "Gerente",
                            Value = 0.0
                        },
                        new
                        {
                            Id = 2L,
                            CalculationTypeId = 3L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4660),
                            ExternalId = new Guid("5bf2adb3-1dfb-4743-8946-5c5f6b04ed6d"),
                            IsActive = true,
                            Name = "Cupom",
                            Value = 0.0
                        },
                        new
                        {
                            Id = 3L,
                            CalculationTypeId = 2L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4670),
                            ExternalId = new Guid("9e500b36-95ef-43c7-a703-fee642cb0bdc"),
                            IsActive = true,
                            Name = "Pgamento a vista",
                            Value = 0.14999999999999999
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FileName")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(130)");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("UrlLocation")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TypeId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("ProSales.Domain.Global.DocumentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("DocumentType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4350),
                            ExternalId = new Guid("d71f43d7-7aeb-4c89-a678-f8c0c504fde4"),
                            IsActive = true,
                            Name = "RG"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4370),
                            ExternalId = new Guid("c7f90a86-7efb-44ca-b187-01bc4ed8ad18"),
                            IsActive = true,
                            Name = "CPF"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4380),
                            ExternalId = new Guid("67d6ef3f-55a9-482b-b1e4-b4139c72812d"),
                            IsActive = true,
                            Name = "CNPJ"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4390),
                            ExternalId = new Guid("e045f443-6647-471c-ad6a-f9e597fa98f6"),
                            IsActive = true,
                            Name = "CNH"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4410),
                            ExternalId = new Guid("0fc72a22-eedf-484f-bf20-a09529888103"),
                            IsActive = true,
                            Name = "Certidão de Nascimento"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4420),
                            ExternalId = new Guid("41f1f63c-d52e-4823-9451-e5dc11a9b1d8"),
                            IsActive = true,
                            Name = "Certidão de Casamento"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4430),
                            ExternalId = new Guid("d890214e-51c0-4a7d-b03e-402ceda80452"),
                            IsActive = true,
                            Name = "Foto do usuário"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.HistoryProductSale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("AmountProductSale")
                        .HasColumnType("double");

                    b.Property<DateTime>("DateSale")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("HistoryProductSale");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Inventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("BarCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<long>("TypeCoinId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TypeCoinId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CartId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<double>("Discount")
                        .HasColumnType("double");

                    b.Property<long?>("DiscountTypeId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<long>("ProductTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SaleId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CartId");

                    b.HasIndex("DiscountTypeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("SaleId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ProductType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("InternalProperty")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("ProductType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4700),
                            ExternalId = new Guid("b9ab3201-c49c-4d2b-a37a-1dd63ff9e54a"),
                            InternalProperty = true,
                            TypeName = "Serviço"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4710),
                            ExternalId = new Guid("1b9c14da-2172-4b48-88ad-73619fab45f7"),
                            InternalProperty = true,
                            TypeName = "Produto"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Global.Sale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<long>("TypeCoinId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SellerId");

                    b.HasIndex("TypeCoinId");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Specification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Specification");
                });

            modelBuilder.Entity("ProSales.Domain.Global.TypeCoin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdatedId");

                    b.ToTable("TypeCoin");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4460),
                            ExternalId = new Guid("9769477e-841f-4f9f-9e02-ea6623246b6d"),
                            Label = "R$",
                            Name = "Real"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4470),
                            ExternalId = new Guid("271766a6-1d3e-4853-9af5-5af884e59007"),
                            Label = "US$",
                            Name = "Dólar"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2022, 11, 22, 16, 29, 49, 365, DateTimeKind.Local).AddTicks(4480),
                            ExternalId = new Guid("74927454-1a70-4bb2-9d27-d86e5616f01f"),
                            Label = "€",
                            Name = "Euro"
                        });
                });

            modelBuilder.Entity("ProSales.Domain.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ProSales.Domain.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataUltimoLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Departamento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImagemUrlUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ProSales.Domain.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProSales.Domain.Global.Address", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", null)
                        .WithMany("Addresses")
                        .HasForeignKey("ClientId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Brand", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Cart", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Client", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Contact", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", null)
                        .WithMany("Contacts")
                        .HasForeignKey("ClientId");

                    b.HasOne("ProSales.Domain.Global.ContactType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ContactType", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.DiscountType", b =>
                {
                    b.HasOne("ProSales.Domain.Global.CalculationType", "CalculationType")
                        .WithMany()
                        .HasForeignKey("CalculationTypeId");

                    b.Navigation("CalculationType");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Document", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", null)
                        .WithMany("Documents")
                        .HasForeignKey("ClientId");

                    b.HasOne("ProSales.Domain.Global.DocumentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ProSales.Domain.Global.HistoryProductSale", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Identity.User", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Inventory", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Product", "Product")
                        .WithMany("Inventory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Order", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("ProSales.Domain.Global.TypeCoin", "TypeCoin")
                        .WithMany()
                        .HasForeignKey("TypeCoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("TypeCoin");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Product", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("ProSales.Domain.Global.Cart", null)
                        .WithMany("Products")
                        .HasForeignKey("CartId");

                    b.HasOne("ProSales.Domain.Global.DiscountType", "DiscountType")
                        .WithMany()
                        .HasForeignKey("DiscountTypeId");

                    b.HasOne("ProSales.Domain.Global.Order", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderId");

                    b.HasOne("ProSales.Domain.Global.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Global.Sale", null)
                        .WithMany("Products")
                        .HasForeignKey("SaleId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.Navigation("Brand");

                    b.Navigation("DiscountType");

                    b.Navigation("ProductType");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.ProductType", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Sale", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("ProSales.Domain.Identity.User", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.HasOne("ProSales.Domain.Global.TypeCoin", "TypeCoin")
                        .WithMany()
                        .HasForeignKey("TypeCoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Seller");

                    b.Navigation("TypeCoin");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Specification", b =>
                {
                    b.HasOne("ProSales.Domain.Global.Product", null)
                        .WithMany("Specifications")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("ProSales.Domain.Global.TypeCoin", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("ProSales.Domain.Identity.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("ProSales.Domain.Identity.UserRole", b =>
                {
                    b.HasOne("ProSales.Domain.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSales.Domain.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Cart", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Client", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Contacts");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Product", b =>
                {
                    b.Navigation("Inventory");

                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("ProSales.Domain.Global.Sale", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProSales.Domain.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ProSales.Domain.Identity.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
